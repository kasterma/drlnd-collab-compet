# OUNoise
#
# To do sufficient exploration we need to add some noise to the actions generated by the models.  The example code
# uses this Ornstein-Uhlenbeck process; which we have (essentially) directly copied.

import copy

import numpy as np
from collabcompet.config import config


class OUNoise:
    """Ornstein-Uhlenbeck process."""

    def __init__(self, size, mu=config['noise_mu'], theta=config['noise_theta'], sigma=config['noise_sigma']):
        """Initialize parameters and noise process."""
        self.size = size
        self.mu = mu * np.ones(size)
        self.theta = theta
        self.sigma = sigma
        self.state = copy.copy(self.mu)

    def reset(self):
        """Reset the internal state (= noise) to mean (mu)."""
        self.state = copy.copy(self.mu)

    def sample(self):
        """Update internal state and return it as a noise sample."""
        x = self.state
        # noinspection PyUnresolvedReferences
        dx = self.theta * (self.mu - x) + self.sigma * np.random.normal(size=self.size)
        self.state = x + dx
        return self.state
